--- DBDefs.pm.sample	2018-08-13 11:54:30.192782770 +0200
+++ DBDefs.pm	2018-08-16 10:25:11.808702056 +0200
@@ -39,7 +39,7 @@
 
 # The server root, i.e. the parent directory of admin, bin, lib, root, etc.
 # By default, this uses the path of lib/DBDefs/Default.pm, minus '/lib/DBDefs/Default.pm'
-# sub MB_SERVER_ROOT    { "/home/httpd/musicbrainz/musicbrainz-server" }
+sub MB_SERVER_ROOT    { "/musicbrainz-server" }
 # Where static files are located
 # sub STATIC_FILES_DIR { my $self= shift; $self->MB_SERVER_ROOT . '/root/static' }
 
@@ -52,10 +52,10 @@
     # How to connect when we need read-write access to the database
     READWRITE => {
         database    => "musicbrainz_db",
-        username    => "musicbrainz",
-        password        => "musicbrainz",
-#       host            => "",
-#       port            => "",
+        username    => "$ENV{POSTGRES_USER}",
+        password    => "$ENV{POSTGRES_PASSWORD}",
+        host        => "db",
+        port        => "5432",
     },
     # How to connect to a test database
     TEST => {
@@ -78,18 +78,18 @@
     # How to connect for read-only access.  See "REPLICATION_TYPE" (below)
     READONLY => {
         database    => "musicbrainz_db",
-        username    => "musicbrainz",
-        password        => "musicbrainz",
-#       host            => "",
-#       port            => "",
+        username    => "$ENV{POSTGRES_USER}",
+        password    => "$ENV{POSTGRES_PASSWORD}",
+        host        => "db",
+        port        => "5432",
     },
     # How to connect for administrative access
     SYSTEM    => {
         database    => "template1",
-        username    => "postgres",
-#       password        => "",
-#       host            => "",
-#       port            => "",
+        username    => "$ENV{POSTGRES_USER}",
+        password    => "$ENV{POSTGRES_PASSWORD}",
+        host        => "db",
+        port        => "5432",
     },
     # How to connect when running maintenance scripts located under admin/.
     # This defaults to READWRITE if left undefined, but should be configured if
@@ -124,14 +124,14 @@
 #               choose RT_SLAVE, as well as the usual READWRITE.
 # * RT_STANDALONE - This server neither generates nor uses replication
 #               packets.  Changes to the database are allowed.
-# sub REPLICATION_TYPE { RT_STANDALONE }
+sub REPLICATION_TYPE { RT_STANDALONE }
 
 # If you plan to use the RT_SLAVE setting (replicated data from MusicBrainz' Live Data Feed)
 # you must sign in at https://metabrainz.org and generate an access token to access
 # the replication packets. Enter the access token below:
 # NOTE: DO NOT EXPOSE THIS ACCESS TOKEN PUBLICLY!
 #
-# sub REPLICATION_ACCESS_TOKEN { "" }
+sub REPLICATION_ACCESS_TOKEN { "" }
 
 ################################################################################
 # GPG Signature
@@ -160,11 +160,11 @@
 # Additionally you should set the environment variable
 # MUSICBRAINZ_USE_PROXY=1 when using a reverse proxy to make the server
 # aware of it when generating things like the canonical url in catalyst.
-sub WEB_SERVER                { "www.musicbrainz.example.com" }
+sub WEB_SERVER                { "localhost:5000" }
 # Relevant only if SSL redirects are enabled
 # sub WEB_SERVER_SSL            { "localhost" }
-# sub SEARCH_SERVER             { "search.musicbrainz.org" }
-# sub SEARCH_ENGINE             { "LUCENE" }
+sub SEARCH_SERVER             { "search:8080" }
+sub SEARCH_ENGINE             { "LUCENE" }
 # Used, for example, to have emails sent from the beta server list the
 # main server
 # sub WEB_SERVER_USED_IN_EMAIL  { my $self = shift; $self->WEB_SERVER }
@@ -197,7 +197,7 @@
 # Keeping this defined enables the banner that is shown across the top of each
 # page, as well as some testing features that are only enabled when not on
 # the live server.
-# sub DB_STAGING_SERVER { 1 }
+sub DB_STAGING_SERVER { 0 }
 
 # This description is shown in the banner when DB_STAGING_SERVER is enabled.
 # If left empty the default value will be shown.
@@ -243,39 +243,39 @@
 # PLUGIN_CACHE_OPTIONS are the options configured for Plugin::Cache.  $c->cache
 # is provided by Plugin::Cache, and is required for HTTP Digest authentication
 # in the webservice (Catalyst::Authentication::Credential::HTTP).
-# sub PLUGIN_CACHE_OPTIONS {
-#     my $self = shift;
-#     return {
-#         class => 'MusicBrainz::Server::CacheWrapper::Redis',
-#         server => '127.0.0.1:6379',
-#         namespace => 'MB:Catalyst:',
-#     };
-# }
+sub PLUGIN_CACHE_OPTIONS {
+    my $self = shift;
+    return {
+        class => 'MusicBrainz::Server::CacheWrapper::Redis',
+        server => 'redis:6379',
+        namespace => 'MB:Catalyst:',
+    };
+}
 
 # The caching options here relate to object caching in Redis - such as for
 # artists, releases, etc. in order to speed up queries. See below if you want
 # to disable caching.
-# sub CACHE_MANAGER_OPTIONS {
-#     my $self = shift;
-#     my %CACHE_MANAGER_OPTIONS = (
-#         profiles => {
-#             external => {
-#                 class => 'MusicBrainz::Server::CacheWrapper::Redis',
-#                 options => {
-#                     server => '127.0.0.1:6379',
-#                     namespace => 'MB:',
-#                 },
-#             },
-#         },
-#         default_profile => 'external',
-#     );
-#
-#     return \%CACHE_MANAGER_OPTIONS
-# }
+sub CACHE_MANAGER_OPTIONS {
+    my $self = shift;
+    my %CACHE_MANAGER_OPTIONS = (
+        profiles => {
+            external => {
+                class => 'MusicBrainz::Server::CacheWrapper::Redis',
+                options => {
+                    server => 'redis:6379',
+                    namespace => 'MB:',
+                },
+            },
+        },
+        default_profile => 'external',
+    );
+
+    return \%CACHE_MANAGER_OPTIONS
+}
 
 # Sets the TTL for entities stored in Redis, in seconds. A value of 0
 # indicates that no expiration is set.
-# sub ENTITY_CACHE_TTL { 0 }
+sub ENTITY_CACHE_TTL { 3600 }
 
 ################################################################################
 # Sessions (advanced)
@@ -296,15 +296,15 @@
 # sure it doesn't point at any production data you may have in your
 # redis server.
 
-# sub DATASTORE_REDIS_ARGS {
-#     my $self = shift;
-#     return {
-#         database => 0,
-#         namespace => 'MB:',
-#         server => '127.0.0.1:6379',
-#         test_database => 1,
-#     };
-# }
+sub DATASTORE_REDIS_ARGS {
+    my $self = shift;
+    return {
+        database => 0,
+        namespace => 'MB:',
+        server => 'redis:6379',
+        test_database => 1,
+    };
+}
 
 ################################################################################
 # Session cookies
@@ -379,12 +379,12 @@
 
 # sub USE_ETAGS { 1 }
 
-# sub CATALYST_DEBUG { 1 }
+sub CATALYST_DEBUG { 0 }
 
 # If you are developing on MusicBrainz, you should set this to a true value
 # This will turn off some optimizations (such as CSS/JS compression) to make
 # developing and debuging easier
-# sub DEVELOPMENT_SERVER { 1 }
+sub DEVELOPMENT_SERVER { 0 }
 
 # How long to wait before rechecking template files (undef uses the
 # Template::Toolkit default)
@@ -410,6 +410,9 @@
 # sub HTML_VALIDATOR { 'http://validator.w3.org/nu/?out=json' }
 # local use example: sub HTML_VALIDATOR { 'http://localhost:8888?out=json' }
 
+# Disable auto forking it is handled by superdaemon
+sub FORK_RENDERER { 0 }
+
 ################################################################################
 # Profiling
 ################################################################################
